using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using MeloMelo_LevelBuilder;

public class Score547 : MonoBehaviour
{
    //     72, 73 (QuickPickUpItem)       67, 68 (QuickSlideStar)       109, 45, 112 (4-Keys)       110, 80, 111 (BoomStopStar)
    //     101, 14, 102 (Ribbon)        91, 92 (FixedAttack)        94 (FixedAirAttack)       15 (RibbonStar)
    //     81, 82 (CombinePickStar)     18, 20, 19 (FixedHeartPack)       201 (RushingStar)       76 (MultipleHitStar)
    //     57, 58 (KeyTileFollowStar)      300, 400 (Bot_Curve)     118, 119 (FixedAllHeartPack)       30, 31 (Sweep)

    public int difficulty;

    private int[] score_database =
    {
        0,

        0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 8, 8, 0, 1, 1, 0, 5, 0, 1, 1, 0, 9, 0, 80, 0, 80,

        0, 9, 0, 101, 0, 14, 0, 0, 19, 19, 0, 1, 2, 5, 0, 1, 8, 5, 0, 1, 1, 5, 0, 1, 1, 9,

        0, 45, 110, 0, 45, 111, 0, 2, 0, 2, 0, 4, 4, 0, 0, 0, 93, 0, 0, 0, 93, 0, 0, 0, 93, 0, // 3
   
        0, 0, 2, 4, 8, 0, 0, 93, 0, 0, 0, 93, 0, 0, 0, 93, 0, 0, 0, 1, 9, 5, 0, 0, 1, 1,

        0, 5, 0, 1, 2, 0, 1, 8, 0, 80, 0, 0, 102, 0, 0, 0, 92, 92, 94, 0, 91, 91, 94, 0, 101, 0,

        0, 94, 0, 0, 0, 1, 0, 5, 5, 80, 0, 9, 0, 6, 0, 5, 5, 80, 0, 110, 80, 111, 0, 102, 0, 14, // 6
   
        0, 101, 0, 0, 0, 82, 0, 82, 0, 81, 0, 81, 0, 76, 0, 76, 0, 1, 1, 5, 0, 1, 1, 9, 0, 80,

        14, 0, 0, 1, 0, 2, 8, 5, 0, 0, 0, 109, 45, 112, 0, 92, 0, 111, 80, 0, 110, 0, 5, 9, 0, 0,

        112, 45, 109, 0, 91, 0, 110, 80, 0, 111, 0, 9, 15, 0, 0, 0, 2, 4, 5, 0, 93, 0, 8, 4, 5, 0, // 9
   
        93, 14, 0, 0, 6, 2, 0, 5, 0, 1, 1, 9, 0, 5, 0, 30, 0, 94, 30, 0, 94, 31, 0, 94, 0, 0,

        0, 0, 3, 0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 1, 0, 5, 0, 0, 0, 94,

        94, 110, 0, 94, 94, 111, 0, 111, 94, 110, 0, 91, 91, 0, 94, 0, 92, 92, 0, 0, 80, 0, 1, 1, 0, 5, // 12
   
        0, 1, 5, 9, 0, 0, 0, 400, 0, 0, 0, 0, 300, 0, 0, 0, 0, 14, 0, 94, 92, 0, 92, 0, 94, 94,

        0, 80, 0, 101, 0, 0, 0, 31, 0, 0, 31, 0, 0, 30, 0, 0, 30, 0, 0, 94, 94, 0, 92, 80, 91, 0,

        0, 1, 1, 1, 0, 5, 5, 9, 0, 73, 72, 0, 7, 0, 0, 400, 0, 7, 7, 0, 300, 0, 7, 7, 0, 14, // 15
   
        0, 94, 91, 0, 91, 0, 0, 94, 94, 0, 80, 0, 102, 0, 19, 0, 0, 0, 2, 2, 4, 0, 45, 0, 8, 8,

        4, 0, 80, 0, 0, 93, 0, 93, 0, 1, 1, 0, 5, 0, 93, 0, 1, 1, 0, 9, 0, 93, 0, 0, 80, 0,

        0, 2, 4, 0, 5, 0, 0, 0, 1, 0, 5, 0, 1, 0, 5, 0, 80, 0, 0, 1, 1, 5, 0, 1, 1, 9, // 18
   
        0, 14, 0, 94, 0, 0, 1, 1, 0, 5, 5, 0, 93, 2, 8, 0, 5, 0, 3, 0, 2, 0, 3, 0, 8, 0,

        1, 1, 0, 80, 80, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    private int[] score_database2 =
    {
        0,

        0, 0, 0, 0, 0, 0, 72, 68, 0, 1, 1, 5, 0, 1, 1, 9, 5, 0, 45, 0, 1, 1, 5, 0, 1, 1,
   
        5, 9, 0, 45, 2, 2, 45, 0, 5, 9, 0, 73, 67, 0, 6, 1, 1, 5, 0, 45, 0, 6, 1, 1, 5, 0,
   
        45, 0, 80, 8, 8, 80, 0, 5, 0, 5, 0, 9, 5, 0, 0, 0, 101, 0, 0, 0, 14, 0, 0, 0, 102, 0, // 3
   
        0, 0, 91, 94, 92, 0, 0, 102, 0, 0, 0, 14, 0, 0, 0, 101, 0, 0, 0, 92, 94, 91, 0, 0, 1, 1,
   
        5, 9, 0, 1, 1, 4, 1, 1, 0, 80, 0, 0, 15, 0, 0, 0, 1, 5, 1, 5, 0, 9, 5, 5, 9, 0,
   
        80, 14, 0, 0, 0, 82, 0, 94, 94, 111, 0, 45, 0, 81, 0, 94, 94, 110, 0, 18, 20, 19, 19, 94, 0, 101, // 6
   
        0, 0, 102, 0, 0, 6, 1, 5, 0, 82, 0, 81, 0, 82, 0, 201, 0, 1, 1, 9, 1, 1, 4, 1, 1, 9,
   
        14, 0, 0, 76, 0, 5, 5, 9, 0, 0, 0, 57, 0, 0, 112, 58, 0, 0, 109, 0, 1, 1, 5, 5, 0, 0,
   
        82, 57, 0, 0, 80, 58, 0, 0, 82, 94, 81, 0, 15, 0, 0, 0, 1, 1, 5, 0, 45, 0, 1, 1, 9, 0, // 9
   
        80, 80, 0, 1, 2, 4, 0, 5, 0, 1, 8, 4, 0, 5, 0, 45, 2, 2, 80, 2, 2, 45, 0, 80, 0, 0,
   
        93, 0, 0, 0, 2, 0, 2, 0, 8, 0, 4, 0, 0, 0, 93, 0, 0, 0, 2, 8, 0, 5, 0, 0, 0, 101,
   
        0, 20, 19, 94, 0, 102, 0, 20, 18, 94, 0, 111, 111, 0, 80, 0, 110, 110, 0, 0, 80, 0, 1, 1, 5, 1, // 12
   
        1, 9, 0, 15, 0, 0, 0, 400, 0, 18, 18, 0, 300, 0, 19, 19, 0, 82, 94, 94, 81, 0, 45, 0, 81, 94,
   
        94, 82, 0, 14, 0, 0, 0, 119, 0, 31, 0, 7, 0, 111, 80, 110, 118, 0, 30, 0, 7, 0, 110, 80, 111, 0,
   
        73, 67, 0, 0, 1, 1, 5, 0, 1, 1, 9, 0, 80, 0, 0, 400, 0, 3, 0, 0, 300, 0, 0, 3, 0, 45, // 15
   
        0, 94, 110, 80, 111, 0, 0, 94, 111, 80, 110, 0, 0, 72, 68, 0, 0, 0, 6, 1, 1, 0, 45, 0, 9, 1,
   
        1, 0, 80, 0, 4, 2, 5, 0, 93, 0, 4, 8, 5, 0, 93, 0, 101, 0, 14, 0, 102, 0, 94, 0, 94, 0,
   
        0, 1, 1, 1, 9, 0, 0, 0, 2, 2, 2, 0, 8, 8, 8, 0, 5, 0, 0, 102, 0, 14, 0, 101, 0, 0, // 18
   
        94, 94, 94, 80, 0, 0, 1, 3, 2, 5, 0, 0, 1, 3, 8, 5, 0, 0, 82, 82, 80, 0, 81, 81, 80, 0,
   
        0, 82, 94, 81, 94, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    void Start()
    {
        difficulty = PlayerPrefs.GetInt("DifficultyLevel_valve", 1);
        ScoreController controller = new ScoreController(difficulty, score_database, "Medium", score_database2, "Medium");
    }
}
