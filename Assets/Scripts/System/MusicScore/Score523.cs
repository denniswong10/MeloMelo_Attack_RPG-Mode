using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using MeloMelo_LevelBuilder;

public class Score523 : MonoBehaviour
{
    //     54, 55 (ScratchMark)       53 [101, 102] (Circle)     72, 73 (QuickPickUpItem)
    //     40 (SplitBomb)      110, 80, 111 (BoomStopStar)     45 (Y_Letter)
    //     201, 12, 202 (HookS)        33 (M)      91, 94, 92 (FixedAirAttack)
    //     41, 44, 42 (FixedItem3)     14 (House)      46 (6-Keys)      300 (RushingStar)
    //     71, 70 (ItemStrikeWithItem3)       81 (BoomStopStar_Random)      21 (TapWtihAirAttack_Random)

    public int difficulty;

    private int[] score_database =
    {
        0,

        0, 0, 2, 2, 0, 8, 8, 0, 4, 0, 1, 1, 5, 0, 1, 1, 9, 0, 46, 0, 46, 0, 46, 0, 33, 0,

        0, 0, 2, 0, 4, 0, 8, 8, 0, 5, 0, 5, 0, 9, 0, 53, 0, 0, 1, 1, 0, 5, 5, 0, 80, 0,

        2, 8, 0, 4, 0, 0, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 5, 0, 1, 1, 0, 6, 6, 0, 5, // 3
  
        5, 5, 0, 80, 21, 0, 0, 0, 2, 0, 8, 0, 0, 41, 41, 41, 0, 42, 42, 42, 0, 80, 0, 80, 0, 0,

        41, 41, 94, 0, 42, 42, 94, 0, 2, 8, 4, 0, 0, 0, 0, 1, 1, 0, 5, 0, 1, 1, 0, 9, 5, 0,

        45, 0, 45, 0, 45, 0, 33, 0, 20, 20, 20, 0, 94, 0, 0, 0, 2, 2, 4, 0, 8, 8, 4, 0, 46, 0, // 6
  
        46, 80, 0, 0, 1, 1, 5, 0, 1, 1, 9, 0, 46, 46, 0, 80, 80, 0, 0, 0, 1, 0, 5, 0, 1, 0,

        9, 0, 81, 0, 0, 1, 1, 0, 5, 9, 0, 1, 1, 0, 21, 81, 0, 0, 0, 977, 0, 0, 76, 0, 1, 5,

        5, 0, 1, 5, 9, 0, 80, 80, 0, 0, 93, 0, 5, 0, 70, 0, 5, 0, 81, 81, 0, 21, 0, 0, 0, 1, // 9
   
        0, 2, 2, 8, 0, 6, 0, 8, 8, 2, 0, 0, 5, 5, 0, 9, 9, 0, 76, 0, 0, 0, 93, 0, 0, 3,

        0, 0, 76, 0, 1, 1, 46, 0, 1, 1, 46, 0, 5, 5, 9, 0, 0, 70, 0, 2, 0, 71, 0, 8, 0,

        5, 5, 21, 0, 0, 4, 0, 2, 2, 2, 0, 9, 0, 8, 8, 8, 0, 977, 0, 2, 2, 0, 8, 0, 5, 0, // 12
   
        9, 0, 5, 0, 8, 8, 8, 0, 4, 2, 0, 4, 8, 0, 1, 1, 0, 5, 0, 1, 1, 0, 9, 0, 0, 0,

        2, 2, 0, 8, 8, 0, 5, 0, 5, 0, 9, 0, 1, 2, 0, 1, 8, 0, 5, 0, 5, 0, 9, 5, 0, 0,

        977, 0, 2, 2, 2, 0, 8, 8, 8, 0, 4, 0, 4, 0, 1, 1, 5, 0, 1, 1, 9, 0, 2, 4, 0, 8, // 15
  
        4, 0, 93, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

        8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 2, 0, 8, 4, 8, 0, 1, 5, 0, 1, 9, 0, 0, 2, 0,

        4, 0, 8, 0, 4, 0, 1, 0, 5, 0, 0, 977, 0, 0, 2, 0, 4, 0, 8, 0, 4, 0, 1, 1, 0, 5, // 18
  
        5, 0, 1, 1, 0, 5, 5, 0, 20, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0,

        0, 8, 8, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 5, 5, 0, 0, 1, 0, 6, 0, 5, 5, 9, 0, 8,

        2, 8, 0, 0, 0, 5, 5, 0, 9, 9, 0, 76, 0, 2, 4, 2, 0, 0, 977, 977, 0, 0, 76, 0, 76, 5, // 21
  
        0, 1, 1, 0, 5, 0, 1, 1, 0, 9, 5, 0, 40, 0, 3, 0, 40, 0, 81, 81, 81, 0, 0, 2, 2, 2,

        0, 8, 8, 8, 0, 5, 0, 5, 0, 54, 0, 54, 0, 55, 0, 55, 0, 20, 0, 0, 1, 2, 0, 1, 8, 0,

        4, 2, 0, 4, 8, 0, 1, 1, 0, 5, 5, 0, 0, 0, 0, 76, 0, 1, 1, 5, 0, 1, 1, 9, 0, 80, // 24
  
        0, 80, 0, 0, 72, 0, 73, 0, 72, 0, 81, 81, 0, 21, 0, 21, 0, 977, 0, 1, 1, 5, 0, 5, 0, 1,

        1, 9, 0, 9, 0, 0, 76, 4, 0, 76, 4, 0, 9, 9, 0, 0, 977, 977, 0, 0, 76, 76, 0, 1, 1, 0,

        5, 5, 0, 9, 9, 0, 2, 2, 2, 0, 8, 8, 0, 93, 93, 0, 93, 93, 0, 101, 0, 102, 0, 0, 80, 0, // 27
  
        0, 81, 81, 0, 80, 0, 21, 21, 0, 2, 2, 0, 4, 0, 8, 8, 0, 4, 0, 1, 0, 5, 5, 0, 1, 0,

        9, 5, 0, 4, 2, 2, 0, 4, 8, 8, 0, 46, 46, 0, 110, 46, 46, 0, 0, 2, 0, 0, 5, 0, 0, 8,

        0, 0, 9, 0, 0, 101, 0, 102, 0, 101, 0, 102, 0, 20, 20, 0, 94, 94, 0, 0, 2, 8, 0, 4, 5, 0, // 30
   
        1, 0, 5, 0, 1, 0, 9, 0, 53, 0, 0, 1, 1, 0, 5, 5, 0, 9, 0, 5, 5, 9, 0, 0, 2, 4,

        2, 0, 8, 4, 8, 0, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    private int[] score_database2 =
    {
        0,

        0, 0, 1, 1, 0, 5, 5, 0, 9, 0, 110, 110, 94, 0, 111, 111, 94, 0, 2, 2, 4, 8, 8, 0, 33, 0,
  
        0, 0, 54, 0, 94, 0, 55, 0, 94, 0, 53, 0, 0, 101, 0, 53, 0, 0, 102, 0, 4, 4, 5, 0, 46, 0,
  
        1, 1, 5, 9, 0, 0, 0, 2, 3, 80, 0, 110, 0, 8, 3, 80, 0, 111, 0, 1, 5, 0, 1, 9, 0, 1, // 3
  
        1, 5, 5, 0, 9, 0, 0, 0, 94, 94, 977, 0, 0, 41, 91, 0, 42, 92, 0, 80, 80, 0, 45, 0, 45, 0,
   
        45, 0, 94, 0, 45, 0, 45, 0, 1, 5, 9, 0, 0, 0, 0, 41, 91, 91, 0, 42, 92, 92, 0, 80, 80, 0,
   
        201, 0, 45, 0, 202, 0, 45, 0, 3, 40, 3, 14, 0, 0, 0, 0, 1, 1, 5, 0, 1, 1, 9, 0, 41, 42, // 6
  
        0, 80, 0, 0, 6, 1, 5, 0, 6, 1, 9, 0, 41, 42, 41, 42, 110, 0, 0, 0, 101, 0, 102, 0, 101, 0,
  
        102, 0, 46, 0, 1, 1, 5, 0, 80, 94, 0, 1, 1, 9, 0, 40, 0, 0, 0, 5, 0, 0, 300, 0, 5, 5,
   
        46, 0, 5, 5, 46, 0, 9, 5, 0, 0, 93, 2, 71, 2, 70, 8, 0, 81, 81, 21, 81, 81, 0, 0, 0, 20, // 9
   
        0, 1, 5, 5, 0, 20, 0, 1, 9, 9, 0, 0, 76, 76, 0, 76, 76, 0, 21, 0, 0, 0, 3, 0, 0, 3,
  
        0, 0, 300, 0, 5, 9, 46, 0, 9, 5, 46, 0, 94, 20, 94, 0, 0, 71, 2, 70, 8, 71, 5, 0, 81,
  
        21, 81, 81, 0, 0, 20, 0, 5, 5, 9, 0, 20, 0, 9, 9, 5, 0, 977, 0, 1, 2, 2, 2, 0, 1, 8, // 12
   
        8, 8, 0, 6, 2, 2, 2, 0, 6, 8, 8, 8, 0, 101, 0, 53, 0, 102, 0, 46, 33, 0, 94, 0, 0, 0,
   
        1, 1, 0, 5, 5, 0, 9, 0, 9, 0, 9, 0, 1, 1, 5, 0, 1, 1, 9, 0, 81, 81, 21, 21, 0, 0,
  
        3, 0, 41, 91, 91, 0, 42, 92, 92, 0, 93, 0, 93, 0, 54, 0, 94, 0, 55, 0, 94, 0, 1, 1, 0, 9, // 15
  
        5, 9, 5, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
  
        8, 0, 0, 0, 5, 0, 0, 0, 0, 1, 2, 2, 0, 1, 8, 8, 0, 81, 21, 0, 80, 80, 0, 0, 1, 2,
 
        4, 0, 1, 8, 4, 0, 81, 81, 21, 0, 0, 977, 0, 0, 1, 0, 5, 0, 1, 0, 9, 0, 2, 2, 4, 0, // 18
  
        8, 8, 4, 0, 93, 2, 2, 0, 93, 8, 8, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0,
   
        0, 93, 0, 0, 0, 93, 0, 0, 0, 1, 0, 4, 0, 4, 0, 0, 0, 94, 0, 5, 5, 9, 0, 94, 0, 9,
  
        9, 5, 0, 0, 0, 76, 76, 0, 76, 76, 0, 21, 0, 1, 1, 6, 0, 0, 977, 93, 0, 0, 300, 0, 5, 5, // 21
  
        46, 0, 9, 9, 46, 0, 80, 110, 80, 0, 3, 2, 40, 2, 3, 8, 0, 81, 21, 81, 81, 0, 0, 1, 2, 2,
  
        0, 1, 8, 8, 0, 5, 0, 5, 0, 5, 0, 54, 0, 94, 0, 55, 0, 94, 0, 0, 93, 0, 93, 0, 2, 4,
  
        0, 8, 4, 0, 3, 40, 3, 40, 0, 5, 14, 0, 0, 0, 0, 300, 0, 5, 5, 46, 0, 9, 5, 46, 0, 80, // 24
  
        111, 80, 0, 0, 3, 2, 71, 2, 40, 8, 0, 81, 81, 21, 81, 81, 0, 977, 0, 72, 0, 4, 4, 5, 0, 73,
  
        9, 9, 5, 0, 46, 0, 76, 76, 0, 76, 76, 0, 81, 21, 0, 0, 93, 70, 0, 0, 300, 0, 5, 5, 46, 80,
  
        0, 9, 9, 46, 80, 0, 80, 80, 21, 0, 3, 2, 40, 2, 70, 8, 0, 45, 0, 45, 0, 53, 0, 0, 73, 0, // 27
  
        0, 94, 91, 0, 72, 0, 94, 91, 0, 1, 2, 2, 4, 0, 1, 8, 8, 4, 0, 101, 0, 53, 0, 0, 102, 0,
  
        53, 0, 0, 20, 5, 5, 5, 0, 20, 5, 5, 5, 0, 46, 80, 46, 21, 0, 0, 1, 1, 0, 5, 5, 0, 9,
  
        0, 101, 0, 53, 0, 0, 102, 0, 53, 0, 0, 111, 80, 0, 1, 1, 5, 9, 0, 0, 1, 5, 0, 1, 9, 0, // 30
   
        5, 0, 101, 0, 102, 0, 101, 0, 53, 0, 0, 110, 80, 0, 1, 1, 5, 9, 0, 80, 80, 21, 0, 0, 1, 3,
  
        5, 0, 1, 3, 5, 0, 1, 1, 5, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    void Start()
    {
        difficulty = PlayerPrefs.GetInt("DifficultyLevel_valve", 1);
        ScoreController controller = new ScoreController(difficulty, score_database, "Medium", score_database2, "Medium");
    }
}
